daml 1.2

module Dwolla.Transfers where

import Dwolla.FundingSources
import Dwolla.Utils

import DA.Optional


type ReceiveFundsRequestCid = ContractId ReceiveFundsRequest
type TransferAgreementCid = ContractId TransferAgreement
type TransferRequestCid = ContractId TransferRequest
type TransferCid = ContractId Transfer


template ReceiveFundsRequest
  with
    operator       : Party
    sender         : Party
    receiver       : Party
    senderSourceId : Text
    amount         : Amount
    optClearingSrc : Optional Text
    optMetadata    : Optional [Metadata]
  where
    signatory operator, sender

    ensure validMetaDataList (fromOptional [] optMetadata)
      && validClearingSource (fromOptional standard optClearingSrc)

    controller receiver can
      ReceiveFundsRequest_AcceptFunds : TransferAgreementCid
        with
          receiverSourceId : Text
          optClearingDest : Optional Text
        do create TransferAgreement with ..


template TransferAgreement
  with
    operator         : Party
    sender           : Party
    receiver         : Party
    senderSourceId   : Text
    receiverSourceId : Text
    amount           : Amount
    optClearingSrc   : Optional Text
    optClearingDest  : Optional Text
    optMetadata      : Optional [Metadata]
  where
    signatory operator, sender, receiver

    ensure senderSourceId /= receiverSourceId
      && validClearingDestination (fromOptional nextAvailable optClearingDest)

    controller operator can
      TransferAgreement_Validate : TransferRequestCid
        with
          senderFundingCid : FundingSourceCid
          receiverFundingCid : FundingSourceCid
          optAchDetails : Optional AchDetails
          optCorrelationId : Optional Text
        do
          senderSrc <- fetch senderFundingCid
          assert (operator == senderSrc.operator)
          assert (sender == senderSrc.user)
          assert (senderSourceId == senderSrc.fundingSourceId)
          assert (senderSrc.status == verified)
          receiverSrc <- fetch receiverFundingCid
          assert (operator == receiverSrc.operator)
          assert (receiver == receiverSrc.user)
          assert (receiverSourceId == receiverSrc.fundingSourceId)
          let clearing = Clearing with
                optSource = optClearingSrc
                optDestination = optClearingDest
              achDetails = fromOptional emptyAchDetails optAchDetails
              correlationId = fromOptional "" optCorrelationId
              metadata = fromOptional [] optMetadata
          create TransferRequest with ..

      TransferAgreement_Fail : ()
        do return ()


template TransferRequest
  with
    operator         : Party
    sender           : Party
    receiver         : Party
    senderSourceId   : Text
    receiverSourceId : Text
    amount           : Amount
    metadata         : [Metadata]
    clearing         : Clearing
    achDetails       : AchDetails
    correlationId    : Text
  where
    signatory operator, sender, receiver

    controller operator can
      TransferRequest_Sent : TransferCid
        with
          transferId : Text
          status : TransferStatus
          created : Time
          individualAchId : Text
        do
          create Transfer with ..

      TransferRequest_Reject : ()
        do return ()


template Transfer
  with
    operator        : Party
    sender          : Party
    receiver        : Party
    transferId      : Text
    status          : TransferStatus
    amount          : Amount
    created         : Time
    metadata        : [Metadata]
    clearing        : Clearing
    achDetails      : AchDetails
    correlationId   : Text
    individualAchId : Text
  where
    signatory operator, sender, receiver

    controller operator can
      Transfer_UpdateStatus : TransferCid
        with
          newStatus : Text
          optIndividualAchId : Optional Text
        do
          assert (status == pending)
          let newIndividualAchId = fromOptional individualAchId optIndividualAchId
          create this with status = newStatus, individualAchId = newIndividualAchId
